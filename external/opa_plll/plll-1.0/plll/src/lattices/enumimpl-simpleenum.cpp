/*
    Copyright (c) 2011-2014 University of Zurich
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
*/

#ifndef PLLL_INCLUDE_GUARD__ENUMIMPL_SIMPLEENUM_CPP
#define PLLL_INCLUDE_GUARD__ENUMIMPL_SIMPLEENUM_CPP

namespace plll
{
    template<class RealTypeContext, class IntTypeContext>
    class SimpleEnumerator
    {
    public:
        typedef boost::function<void(const linalg::math_matrix<typename IntTypeContext::Integer> & basis,
                                     int p,
                                     const linalg::math_rowvector<typename IntTypeContext::Integer> & vec)> CallbackFunction;
        
    private:
        Updater<RealTypeContext, IntTypeContext> d_update;
    
        Verbose & d_verbose;
    
    public:
        SimpleEnumerator(Verbose & v)
            : d_update(), d_verbose(v)
        {
        }
    
        SimpleEnumerator(Verbose & v, GaussianFactorComputer &, unsigned enumdimension)
            : d_update(), d_verbose(v)
        {
        }
    
        bool enumerate(Lattice<RealTypeContext, IntTypeContext> & lattice, unsigned begin, unsigned end,
                       linalg::math_rowvector<typename IntTypeContext::Integer> & result,
                       typename RealTypeContext::Real & bound)
        // Finds a shortest vector in the lattice generated by the orthogonal projections of the vectors
        // A.row(begin) to A.row(end) into the orthogonal complement of the vectors A.row(0) to
        // A.row(begin-1). Uses the Kannan-Schnorr-Euchner enumeration method.
        {
            // Initialize updater
            RealTypeContext & rc = lattice.rc();
            IntTypeContext & ic = lattice.ic();
            d_update.initialize(d_verbose, lattice, begin, end, bound);
        
            const unsigned dim = end - begin + 1;
        
            // Prepare enumeration
            linalg::math_rowvector<typename IntTypeContext::Integer> x(dim);
            linalg::math_rowvector<typename RealTypeContext::Real> x_real(dim);
            for (unsigned i = 0; i < dim; ++i)
            {
                x_real[i].setContext(rc);
                setZero(x_real[i]);
            }
            linalg::base_rowvector<long> delta(dim);
            linalg::base_rowvector<int> delta2(dim);
            linalg::base_rowvector<int> r(dim + 1);
            linalg::math_matrix<typename RealTypeContext::Real> sigma(dim, dim);
            for (unsigned i = 0; i < dim; ++i)
            {
                r[i] = dim - 1;
                for (unsigned j = 0; j < dim; ++j)
                {
                    sigma(i, j).setContext(rc);
                    setZero(sigma(i, j));
                }
            }
            setOne(x[0]);
            setOne(x_real[0]);
            delta[0] = 1;
            delta2[0] = 1;
            for (unsigned i = 1; i < dim; ++i)
                delta2[i] = -1;
            linalg::math_rowvector<typename RealTypeContext::Real> c(dim), ell(dim + 1);
            for (unsigned i = 0; i < dim; ++i)
            {
                c[i].setContext(rc);
                setZero(c[i]);
            }
            for (unsigned i = 0; i <= dim; ++i)
            {
                ell[i].setContext(rc);
                setZero(ell[i]);
            }
        
            // Do enumeration
            unsigned stage = 0, last_nonzero_stage = 0;
            bool noSolutionYet = true;
            typename RealTypeContext::Real tmp(rc);
            while (true)
            {
                tmp = x_real[stage] - c[stage];
                square(ell[stage], tmp);
                ell[stage] *= lattice.getNormSq(begin + stage);
                ell[stage] += ell[stage + 1];
                if (ell[stage] <= bound)
                {
                    if (stage == 0)
                    {
                        d_update(lattice, begin, end, result, bound, x, ell[0], noSolutionYet);
                    }
                    else
                    {
                        --stage;
                        if (stage > 0)
                        {
                            if (r[stage - 1] < r[stage])
                                r[stage - 1] = r[stage];
                        }
                        for (unsigned j = r[stage]; j > stage; --j) // this is the summation order considered in Pujol-Stehle
                        {
                            tmp = x_real[j] * lattice.getCoeff(begin + j, begin + stage);
                            sigma(stage, j - 1) = sigma(stage, j) + tmp;
                        }
                        c[stage] = -sigma(stage, stage);
                        bool ru;
                        arithmetic::convert_round(x[stage], c[stage], ru, ic);
                        arithmetic::convert(x_real[stage], x[stage], rc);
                        delta[stage] = 0;
                        delta2[stage] = ru ? 1 : -1;
                        continue;
                    }
                }
                if (++stage >= dim)
                    break;
                r[stage - 1] = stage;
                if (stage >= last_nonzero_stage)
                {
                    last_nonzero_stage = stage;
                    ++x[stage];
                }
                else
                {
                    delta2[stage] = -delta2[stage];
                    delta[stage] = -delta[stage] + delta2[stage];
                    x[stage] += arithmetic::convert(delta[stage], ic);
                }
                arithmetic::convert(x_real[stage], x[stage], rc);
            }
            return !noSolutionYet;
        }
    
        static void setCallback(CallbackFunction)
        {
        }
    };
}

#endif
