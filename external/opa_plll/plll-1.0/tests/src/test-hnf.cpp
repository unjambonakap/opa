/*
    Copyright (c) 2011-2014 University of Zurich
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
*/

#include <plll.hpp>
#include <plll/arithmetic.hpp>
#include <plll/matrix.hpp>
#include <plll/linalg.hpp>
#include "factor.hpp"
#include "primes.hpp"
#include "profiling.hpp"
#include <sstream>
#include <vector>
#include <list>
#include <cmath>

using namespace plll;

unsigned long ModInv(unsigned long x, unsigned long p)
// Find x^{-1} modulo p.
{
    signed long xx = x, yy = p, a = 0, b = 1, aa = 1, bb = 0, t;
    while (yy != 0)
    {
        signed long q = xx / yy, r = xx % yy;
        xx = yy;
        yy = r;
        t = aa - q * a;
        aa = a;
        a = t;
        t = bb - q * b;
        bb = b;
        b = t;
    }
    // Now xx = gcd(x, p) = a*x + b*p
    if (a < 0)
        a += p;
    return a;
}

void computeRankProfile(std::vector<std::pair<unsigned, unsigned> > & rp, const linalg::math_matrix<arithmetic::Integer> & A, unsigned long p)
// Computes the rank profile of A modulo p and stores it into rp. Returns false in case p is not a
// prime. Assumes that p squared plus some more fits into unsigned long.
{
    const unsigned m = A.rows(), n = A.cols();
    rp.clear();
    rp.reserve(std::min(m, n));
    
    arithmetic::Integer pp(p), qq, rr;
    linalg::math_matrix<unsigned long> Acpy;
    Acpy.resize(m, n);
    for (unsigned i = 0; i < m; ++i)
        for (unsigned j = 0; j < n; ++j)
        {
            euclideanDivision(qq, rr, A(i, j), pp);
            Acpy(i, j) = arithmetic::convert<long>(rr);
        }
    std::vector<unsigned> row_indices(m);
    for (unsigned i = 0; i < m; ++i)
        row_indices[i] = i;
    // Transform Acyp to row echelon form using row operations
    unsigned r = 0; // current rank
    for (unsigned i = 0; i < n; ++i)
    {
        // Iterate over columns
        unsigned nz = r;
        for (; nz < m; ++nz)
            if (Acpy(nz, i) != 0)
                break;
        if (nz == m)
        {
            // No non-zero entry!
            continue;
        }
        // Swap rows nz and r
        if (nz != r)
        {
            linalg::swap(Acpy.row(r), Acpy.row(nz));
            std::swap(row_indices[r], row_indices[nz]);
        }
        // Add entry (row_indices[r], i) to rank profile
        rp.push_back(std::make_pair(row_indices[r], i));
        // Make entry (r, i) one
        unsigned long a = ModInv(Acpy(r, i), p);
        Acpy(r, i) = 1;
        for (unsigned j = i + 1; j < n; ++j)
            Acpy(r, j) = (Acpy(r, j) * a) % p;
        // Use the r-th row to clear out the rows below
        for (unsigned j = r + 1; j < m; ++j)
            if (Acpy(j, i) != 0)
            {
                unsigned long m = Acpy(j, i);
                Acpy(j, i) = 0;
                for (unsigned k = i + 1; k < n; ++k)
                    Acpy(j, k) = (Acpy(j, k) + (p - ((Acpy(r, k) * m) % p))) % p;
            }
        // Increase rank
        ++r;
        if (r == m)
            break;
    }
}

bool computeRankProfile(std::vector<std::pair<unsigned, unsigned> > & rp, const linalg::math_matrix<arithmetic::Integer> & A, const arithmetic::Integer & p)
// Computes the rank profile of A modulo p and stores it into rp. Returns false in case p is not a prime.
{
    const unsigned m = A.rows(), n = A.cols();
    rp.clear();
    rp.reserve(std::min(m, n));
    
    linalg::math_matrix<arithmetic::Integer> Acpy;
    Acpy = A % p;
    std::vector<unsigned> row_indices(m);
    for (unsigned i = 0; i < m; ++i)
        row_indices[i] = i;
    // Transform Acyp to row echelon form using row operations
    unsigned r = 0; // current rank
    for (unsigned i = 0; i < n; ++i)
    {
        // Iterate over columns
        unsigned nz = r;
        for (; nz < m; ++nz)
            if (!isZero(Acpy(nz, i)))
                break;
        if (nz == m)
        {
            // No non-zero entry!
            continue;
        }
        // Swap rows nz and r
        if (nz != r)
        {
            linalg::swap(Acpy.row(r), Acpy.row(nz));
            std::swap(row_indices[r], row_indices[nz]);
        }
        // Add entry (row_indices[r], i) to rank profile
        rp.push_back(std::make_pair(row_indices[r], i));
        // Make entry (r, i) one
        arithmetic::Integer gcd, a, b;
        XGCD(gcd, a, b, Acpy(r, i), p); // gcd == a * Acpy(r, i) + b * p;
        if (!isOne(gcd))
            return false;
        setOne(Acpy(r, i));
        for (unsigned j = i + 1; j < n; ++j)
        {
            Acpy(r, j) *= a;
            Acpy(r, j) %= p;
        }
        // Use the r-th row to clear out the rows below
        for (unsigned j = r + 1; j < m; ++j)
            if (!isZero(Acpy(j, i)))
            {
                arithmetic::Integer m = Acpy(j, i);
                setZero(Acpy(j, i));
                for (unsigned k = i + 1; k < n; ++k)
                {
                    Acpy(j, k) -= Acpy(r, k) * m;
                    Acpy(j, k) %= p;
                }
            }
        // Increase rank
        ++r;
        if (r == m)
            break;
    }
    return true;
}

namespace plll
{
    namespace linalg
    {
        // Defined in linalg.cpp
        arithmetic::Integer det(const linalg::math_matrix<arithmetic::Integer> & A, const arithmetic::Integer & p);
    }
}

unsigned computeRankProfileInvariantFactorsProduct(std::vector<std::pair<unsigned, unsigned> > & rank_profile, arithmetic::Integer & h, const linalg::math_matrix<arithmetic::Integer> & B)
// Computes the rank profile and the rank of B, stored in rank_profile, as well as a multiple of the
// absolute value of the product of the invariant factors of B, stored into h. Uses the algorithm
// described in the Proof of Proposition 2.3 of Hafner, McCurley: "Asymptotically Fast
// Triangularization of Matrices over Rings".
{
    const unsigned m = B.rows(), n = B.cols();
    
    // First determine primes
    arithmetic::Integer T = abs(B(0, 0)), t;
    for (unsigned j = 1; j < n; ++j)
        if (compareAbsValues(T, B(0, j)) < 0)
            T = abs(B(0, j));
    for (unsigned i = 1; i < m; ++i)
        for (unsigned j = 0; j < n; ++j)
            if (compareAbsValues(T, B(i, j)) < 0)
                T = abs(B(i, j));
    T = power(T, std::min(n, m));
    t = arithmetic::convert<arithmetic::Integer>(std::min(n, m));
    if (std::min(n, m) & 1)
    {
        // Odd
        t = power(t, std::min(n, m));
        t = sqrtCeil(t);
    }
    else
    {
        // Even
        t = power(t, std::min(n, m) / 2);
    }
    T *= t;
    T <<= 1;
    ++T;
    FactorizedNumber modulus;
    arithmetic::Integer p;
    while (modulus.number() <= T)
    {
        p = nextPrime(p);
        modulus.mulCoprimeLarger(FactorizedNumber(p, 1));
    }
    const std::list<FactorizedNumber::PrimeExp> & f = modulus.factorization();
    
    // Compute rank profile over Q
    rank_profile.clear();
    std::vector<std::pair<unsigned, unsigned> > tmp;
    arithmetic::Integer bound(sqrt(std::numeric_limits<unsigned long>::max()) / 2);
    for (std::list<FactorizedNumber::PrimeExp>::const_iterator i = f.begin(); i != f.end(); ++i)
    {
        // Compute rank profile modulo i->p
        if (i->p < bound)
            computeRankProfile(tmp, B, arithmetic::convert<long>(i->p));
        else
            computeRankProfile(tmp, B, i->p);
        if (tmp.size() > rank_profile.size())
            tmp.swap(rank_profile);
        
        // Are we done anyway?
        if (rank_profile.size() == std::min(m, n))
            break;
    }
    
    // Compute h as the absolute value of the determinant of the submatrix determined by the rank profile
    ChineseRemainder CR(modulus);
    linalg::math_matrix<arithmetic::Integer> A(rank_profile.size(), rank_profile.size()); // store submatrix into here
    for (unsigned i = 0; i < A.rows(); ++i)
        for (unsigned j = 0; j < A.cols(); ++j)
            A(i, j) = B(rank_profile[i].first, rank_profile[j].second);
    for (ChineseRemainder::Iterator i = CR.begin(); i != CR.end(); ++i)
    {
        arithmetic::Integer v = linalg::det(A, i.prime());
        i.setValue(v);
    }
    h = CR.process(true);
    h = abs(h);
    
    // Done!
    return rank_profile.size();
}

unsigned myTriangular(arithmetic::Integer & h, linalg::math_matrix<arithmetic::Integer> & B)
// Applies row operations to B (by multiplying unimodular matrices from the left) to put B into
// triangular form. Returns the rank of B. The resulting matrix will be stored in B and will be
// modulo h. The value h will be a multiple of the absolute value of the product of invariant
// factors of B. Uses the algorithm sketched in the Proof of Proposition 2.3 of Hafner, McCurley:
// "Asymptotically Fast Triangularization of Matrices over Rings".
//
// Assumes B.rows() <= B.cols(). !!! ??? ...
{
    std::vector<std::pair<unsigned, unsigned> > rank_profile;
    unsigned rank = computeRankProfileInvariantFactorsProduct(rank_profile, h, B);
    
    // const unsigned m = B.rows(), n = B.cols();

    // Take martix modulo h
    std::cout << "h = " << h << ", rank = " << rank << "\n";
    B %= h;
    
    // Make upper-triangular
    
    
    // ...
    
    return rank;
}

unsigned myHNF(linalg::math_matrix<arithmetic::Integer> & B)
// Applies row operations to B (by multiplying unimodular matrices from the left) to put B into
// Hermite Normal Form. Uses the 1996 algorithm by Storjohann and Labahn.
{
    arithmetic::Integer h;
    unsigned rank = myTriangular(h, B);
    
    // const unsigned m = B.rows(), n = B.cols();
    
    // ...
    
    return rank;
}

bool isHNF(const linalg::math_matrix<arithmetic::Integer> & B)
{
    unsigned r = 0;
    for (unsigned c = 0; c < B.cols(); ++c)
    {
        // Check entries below: must be zero
        for (unsigned rr = r + 1; rr < B.rows(); ++rr)
            if (!isZero(B(rr, c)))
                return false;
        
        if (!isZero(B(r, c)))
        {
            // Check sign
            if (sign(B(r, c)) < 0)
                return false;
            
            // Check entries above
            for (unsigned rr = 0; rr < r; ++rr)
                if (!isZero(B(rr, c)))
                {
                    // Check sign
                    if (sign(B(rr, c)) < 0)
                        return false;
                    
                    // Check value
                    if (B(rr, c) >= B(r, c))
                        return false;
                }
            
            // Increase rank so far
            ++r;
            if (r == B.rows())
                return true;
        }
    }
    return true;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixSmallDep()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[10, -20], [6, 34], [5, 0], [2, 1]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixSmall()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[2, 3, 4], [1, 5, 3], [-2, 0, 7]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixSmall2()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[2, 3, 1231], [5, 4, 432]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixSmall3()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[4, 4], [5, 5], [6, 5]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixSmall4()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[0, 0], [4, 6], [6, 9]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixBig()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[47472735636948, 17331712871986, 18084085679440, -15574546209631, -15726164908693, -18314378074056, 20481633207161, 13303076978894, 14092083839603, 17896521538459, -21616116755283, -13650469823897, -23554043269229, -10513615759067, -17430418006804, 283609271165934953592],"
                         "[17331712871986, 53348735821082, -13202895648851, -22939516991621, 10955042753590, 1686226838405, 25165906637479, 25733331857612, 12448567495888, -6965835258510, -10447554009938, 12630366793699, -13778985449141, -15077051893048, -4356147197616, -338070499033810241472],"
                         "[18084085679440, -13202895648851, 56885674302679, 20900807291315, 3062476838120, 8628099192099, 11721700599870, 8056716078327, 12304059931052, 7911613390900, -14286851320856, -12550175200959, 4949702656308, 14504431446215, -23460005009119, 488177215723223135088],"
                         "[-15574546209631, -22939516991621, 20900807291315, 55791572534393, -5036598146873, 26990857563744, 7884710194193, -22730032843284, 6105415824995, 13624031903455, 5327563473927, -12929648457423, 20937416008043, 30373332752070, -14643900733617, -159723691649551732488],"
                         "[-15726164908693, 10955042753590, 3062476838120, -5036598146873, 55972706897482, 26719686299456, 3389278803728, 27504127569360, 14675918405663, -7677005645379, 14847885054598, 25521807167353, 25622628451738, -13152455532811, 21166081844433, -141378227817377183832],"
                         "[-18314378074056, 1686226838405, 8628099192099, 26990857563744, 26719686299456, 65262229458295, -3542351647991, -13924922351303, 3728011627888, 8254438249073, -3079647987694, 11042677851456, 19155608138105, -617942405043, -5764297717935, -56168401440806083224],"
                         "[20481633207161, 25165906637479, 11721700599870, 7884710194193, 3389278803728, -3542351647991, 63734799483599, 2366045901880, 30168020550926, 9668346277856, -21426822586378, -7743225039457, -11245396217417, 8587659637179, -22286470740581, 145705162778992270608],"
                         "[13303076978894, 25733331857612, 8056716078327, -22730032843284, 27504127569360, -13924922351303, 2366045901880, 77949419399703, 25015702789988, -18745578413939, 22108787798152, 14126901747930, -5763289794525, -3084849615087, 27703507261336, -14818513414730443344],"
                         "[14092083839603, 12448567495888, 12304059931052, 6105415824995, 14675918405663, 3728011627888, 30168020550926, 25015702789988, 55504138052860, -6676806865797, 5595168823523, 1323594151637, 8202058909836, -6985241747234, -144812611195, 114159471933443520456],"
                         "[17896521538459, -6965835258510, 7911613390900, 13624031903455, -7677005645379, 8254438249073, 9668346277856, -18745578413939, -6676806865797, 54642308344440, -23796390643557, -13576340913593, -3985825622016, -2997289605777, -21088921548932, 373488469850577555312],"
                         "[-21616116755283, -10447554009938, -14286851320856, 5327563473927, 14847885054598, -3079647987694, -21426822586378, 22108787798152, 5595168823523, -23796390643557, 62088666509690, 21372442949341, 11621236128074, 6397870075023, 31574075378705, -413240316926523261624],"
                         "[-13650469823897, 12630366793699, -12550175200959, -12929648457423, 25521807167353, 11042677851456, -7743225039457, 14126901747930, 1323594151637, -13576340913593, 21372442949341, 48699315999545, 18055945999589, -21013484721200, 13275573738099, -208644414365160654408],"
                         "[-23554043269229, -13778985449141, 4949702656308, 20937416008043, 25622628451738, 19155608138105, -11245396217417, -5763289794525, 8202058909836, -3985825622016, 11621236128074, 18055945999589, 63691539530952, -10323988040342, 15402415345503, -128807923557872974248],"
                         "[-10513615759067, -15077051893048, 14504431446215, 30373332752070, -13152455532811, -617942405043, 8587659637179, -3084849615087, -6985241747234, -2997289605777, 6397870075023, -21013484721200, -10323988040342, 62914006177723, -6130465432187, -618653942903607520416],"
                         "[-17430418006804, -4356147197616, -23460005009119, -14643900733617, 21166081844433, -5764297717935, -22286470740581, 27703507261336, -144812611195, -21088921548932, 31574075378705, 13275573738099, 15402415345503, -6130465432187, 67452095791626, -90957220758988216896]]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixLarge()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[2116403082371869720683693394276970360299642162558342355675014410771989791845340105007240644994094893408332181197956887657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[371644562438531748585630085667746983470408244373580742281269821738816154869236300428137729771977309321210236491639933332 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[970128588937842140661210199069589679615703684562655262446230094731888177573698872897660975186881893815551083050469479861 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1617885213873858163065250499756376305837976609435400008057297118650398723827143214937143752380433141030895046085134663139 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[861650440856876922136315403300972806928844583476323346957866774048720276102084753290592827764541119558381900492846561687 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1238401879408921089844474386903737818276239209740348854610933282304058072380604156331847453869318599590680629601714021166 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[302328193892196204243023116106370462383132199983296195152211088133814423239197999286069616594274614510736145263925517783 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[443681408734567838343607093614379754005413471877157728597635239760454843085205167872415159913459109353288267514781828878 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[766924867740885236236436059448427698090379772276332984401846634621581522685296543079817924330812470098383411173196131706 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1297358997739527278188204320802855592592899794686777403497982861534586993960747704855480346961487202646587358008424555998 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1923256447555821027760823712014018288715572436486045654757604016247481734877091777864720799782922934671078042956616750575 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[138791684593421316484912136928975449358519306209923545534576080943933941788220318189376736295439954669622762228268690319 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1752053685015713567891789191640042337741805857685242642164798009587123835789029180360779591122248108173121788944806990018 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2046303652643607551083773382245919660376167541225343779851326688493989336785866602067814167781776230842039502024961224990 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[161701314003903527294539093851830420185672588693938679547737547227941952578846685981290488906797666486385636306427956922 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2059714413420462412604210521069862437228594984719691499291824764864200097906908418575923366701593028750494787160369423664 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[236619910841436753359639417128223769093980125208659184950079289394351446700013212860226717401403083201476790108710198995 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[521807735461695034807439230274452751978618453371762238147892673540779228084610103951896314431773738642862361617950116793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1898466106725110481310768025369914138166711138228177956551055744552328440573249624614143156799333166991080740657486025033 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2043257177335956951070219397858777123559357103945545237417070888207682821645422085875324039671029805011652245597869305538 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[904225163671074382768019753539274681795779625382511961264465653291127670514453520050551644296901230356912243654225654401 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[32771872907828211382289261014117057923327418144915569087238809343521061214616361304729214156019094728432041297468304493 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[185789413730166201171458176468755969088909804647627433894406398430754979813498091666025324336151794710682026172503101451 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[832962803741579150035009987801883256172874768041791705764900197393212435979706525525238578679210561346645899576161141793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1042621519072433920283083562428469593602182919945835211322354565330887090220897472063018488024892773750305996602609483380 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[171388995082154233233012548090942599143715724202696890942088990082340274801161970138190639906868753248272491463187401695 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2100493671200104536533474921602153259773348308608862002579228988953071977809598351863259953863461834410595513598037485038 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[849028874593296703934398545250196283716795306401228544442045159484861904205470885973430411009159267090428932112495507852 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1046701824957941065045627030825750373570344803958334982369286898950041088016988929016615138537061510672807965422152953094 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[542875223055107687983299240475304624160994620138110511564200316784444891282138558584574906974554732933893987639864801905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1584382682441666539891259939997296576922760554674178579888435692973226441994929350838648607785926118636355860195320578386 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]\n"
                         "[316503555252451563889967315570982477067169012390726271667771540315451791264064871351402596704077496942199692552980634552 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n"
                         "[1837738370141979294787389742951594377674155679679663044021277108096701623188534975556948353238304199946688862260850711361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]\n"
                         "[739578827111769709363025786954762546314747907261948920241963639022818938531742051897853101539916787244178755946187647555 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]\n"
                         "[1619290331242112257658768582175275050536918255267445777163956250682374601071625719555758108294380161274992932056486622464 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]\n"
                         "[852244520379043286720418573598354118899465075623425806989984806937105488837636350325384144744195783077780523735920132437 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n"
                         "[491483555886899765880626820064070785891162464132735054675483057099729053163156386346862511333336434543264870015359686516 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]\n"
                         "[842211543902380452313476978966614900223458281660135345978369910918684855621079286840261544398613444576199814061553688778 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]\n"
                         "[1874411128584029818874533765431554481569149176662206972692659544113727361200950942823993552649265946057735986943133343384 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]\n"
                         "[1807564784681621941238943795385610371403525911952667414563776455384585295644151678837176854600997116364524617338835884611 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]\n"
                         "]");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixLarge2()
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[4414277847498517212780273615322343223162165347651952162660447969037048087511371929744623459029965448833867768192426577508643450406243226212753987084281677555563784082793908213057006080951754307856736289671667930848751429101489544644776496113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1411622262491305395361264131875902278823203734420811135710947469154387364263624038121533081333617552519446351141530166506854732774327740759202420515968918784194721355289554251196542254719667320208390284268692635885767842139383330888117476103 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[644660467739410284403976200077023322897363590699889563125006802017929698195823019312701261782237092446595144930557812217262371256223812395519213598708591133404438697945539569482647728462713528919949452074107654154640266008301546936337574524 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3772420074101477842722626305216125619268600750873139415179759985476619571896229472968812212437392600722018565227341161633959258962907804623985936353439369275591236758771169824571169279657609568329759443682791641451328289434937267875467400356 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[102734444197469265545015060482098871226375718722890917637845910395259051172871763214738111682427258940874450300738160194603106449217320389732959819179524244212347912679483256460400706001760536837957556311995130284661404579915164269385175131 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3988257263517901207727373918787216643725124336457204377136340368865382656490170211189437279787031931343800240720637097642514091484025366126598690967360516371484045124718209676465486507017831859274309996996848284867770513006186537032618319168 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1900225092610672435539258490199015957004873158063581109546891334118675877620362221227328746733894251695875963303196443508584747310726261993942816552935890226372772434079678259251773814130803840629873903495091671694772379251403345768276889363 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[4075937977487079132411210588621000804313172985032364235125447496977159370157967517769093244631520576173639867199700130658591880999378692079965712492525266268915380212730643122995364966742563166966697010483840094026129529914367611853108310978 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3510470685288548175980642640247751224742879374943940774987854430509593363530478197509295507946148345099072337964317033686824915072496907802659872250013937854323282660685686205346982353900483886470512055904457902505026885408672235155717203633 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2204629312900197167191460412156883252778421554676180871213686794161642998864345755292935392207567286808489123500630879667289320088875160731797761999271964241769718748996397430883293954060960429559709207365594781490348006592385891073644972483 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3018821212001573893409551545833871587392027092014242948116694375687800936969002055283248025562744122903565943160235342116107917326441350893832664808532933940041307528399056789497729118105645956392281725440286744012944020597525361963323668146 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2927393357549241649936164652695629554947685379915193458963323814339108301928810606039254451458071522975215199517496792975492920216299207792051200707674190521570506879407948898553440023398769922959656533197059992855781013779738702829384923028 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2229951968318623936059351901186244350684992217817049409284328243126895603482382213865133567920290990338162012608583197075269892806489169639948624846356165575537137800733961294404890882861669485926051422735069368221914213076586849159810565464 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1208152326770964280868738807492530483942299307602666625432674749524532183049720860026328774388433988670951350148981854346778671088198345545435728754958435807516300725289683157309645741339249040901875586286975236470936694809802148730084140767 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1688438620856319421261135339412197974587194599426634945651406494952044825655408643193848723403840474517687289845099525667057004862194997826498324318774940531024004752335996817199373998624976022577770943134949243311392378961231106484450602323 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2464282783871715986680820561397629835061609928957783815710184530972354322640149940980162424663358906773974902234990979778700805436338219931407703624276956200283881146486274550298891744792614470774753614793638351595047079897674541043187688428 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3052516920469481872733892085682517212722152369437458556890737905570594226944586443097072674682900164879127864185080058353569692120261712054255467631520242576917521752578475781687171900302659575224365875970427300301370016611621810637637073431 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1607041074453131086829488255302767038140625295861093736245734944046615352485442162564646236013490297797397465801848243377788143941359062360242051427953221538465828355436493268424042840346846433135057591135886012142992367798739410308914629633 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2483385535079591250724085756574168112223087294599861417245025132849838089292435004626295455339619377226621722732200133902175664292420969870210416549699371659190167812069722361139203142286234137551509831910802312302486176729060040593451930931 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3540914686843041867296268162341418854806016668256741303734514756281238182203763565752472292777452822363293124539399380964629374301367383565887063779351387314313037345585263816079870887606395103201265494195694822407084963929648459899581222929 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3443249187404017446713625626752319707630670745439373421700347290698258857384726493377229630548971785150623054246934810136413570853587340147560308145499057549948986321698388386964644468584670014230960136292786788746755897840805496088151289803 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2319338106378624007245163267076354151005458142891806888769327249489278483237628829093107545165356778986734985949447335623593458448436019594111376670576549658889069491918301455473777206482422867515470497171232151303840212979272397599456179190 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3271347282472778213856516926275441626855202601728245711148800476755039257613909195069765040104929355247847162024554998325335146675408165548549823021406821406472599391890194835636941777942262782805235740373883379036068568594575900700646401614 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1391087022131314240579851065783243476024820068210975890957817211884600074529895469158630064493014519045778321856751258098759729011139554009468455126808996643733790330758365504138297298155780060445800551688549971079237845923939897026722297726 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2624145805533702581951014993979062814130003899681436193533477743387573051671029013145473349317302031869803968546922399139998846420438699378078928954561879170201088280887010639927522350809989308441386624757119660565204115066855778457849356474 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1594715840587202924566865770800504998264158466991447975878709516634787688289755368747951032687730004172155161709992566807174711555633349809871747254358423702394361437235764255193566725311901705946188813728343878784516154182654957995704168588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3870128661997026732271101102715606799281153587942855640340196299497516647943232351974509372967607193798662246855755002947511880743254786831782612564796550579799525732513377736680882373709956736344257055882628782568494189250902791594013165531 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3088168991180757511645444037955287244361878579987103886602929672764629622764975682779248461296706549040831012856349951408312796258151022606823887349507861483864134123817309637764112206432424568630424198412255495782322242764316452201857782206 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2577623582495651525134288537806795251952763890613195072907915583992025518992870670441795384144541314916710937834015798864738921079661164187987851421490176662538194473151875546033531915199218450616542481849982848664787493609682929029923607320 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1972348622437841674170179084269595440640557091442411565055202741798264282348721552222759228368613244220246758710453508218899487260002977221592145339981404669061962895156883807758342354509118908202816211546131382193570032979550510586166445377 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[663471048406854100469720813790533284741059822568676779860814340923545245839589725590127177304767027076041932129229616593398598384565261450308372522388045888380532694100599789220650566494569351269178572971876826605181964622443936856321579152 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3486734295517181914192542298284190940515055479082400839194132411540946467012755147297984944854260138539114511422184935013086153061786430829430366238400534806794386287875327063597537789854288925888109434910989078269665428082234127672869659310 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[509041250234611926389859820498462957765579791256563880154092386500653763836593855068879626845735344860278867612338398502807466145421779743499189649712487314750653189449670181060732265496804134998295753043933753841712563117580338263795799592 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[396556072994751930595988716011902408965013269998935935194964683343009761928882403343813634660428709031338015703627368851878762125903266024532452045695295898623107936753342714259263482526078078534291620842303194693866113563128656302450631396 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[4130406212094370635206202280184875255441830025286292583171566209206944731457221737803207037277153817263804698035275462645954505122996671303189768354631791445973763234462087706023914533608852677165970214339783147559498267614572162782496225091 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[136653703001803215049021846945755284137013631433688484419013975279771980714275718054812987212720428841053916805237916886883026539522608371893160130638533241872546799306062681669244949902088532660032111055620039502267288817709622118933689346 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2164067301821518133676569034460025345047445612291330763703761233343620324548881343673449415646295855820487511434037533195174539433627227523181269366969637001437581821606296355068858233003323834851792555331598365284830073826997309438348634850 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1156049570425821544765931834048635627709937268299691441642734668791931065293919160453482107856259439589140562170619844019015075101975823377979660661493154647916299252287960863034335653733650661800094460167915103140184740730882183706803979527 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2148011029359283843307351797575201553555436582317630063161489979098139338229808395194020033259087259834974421227327766912139378229665298313590435438654792967509243329642280567442489555272170705391688319161736538313466184517318161888560964604 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2922013089781999409078195863081815228350663685603980774059959095933387859408748312490414251684075323513959839225843498706566053457477443471224770818898487270525260604985501154883232086909789563258388071212697322199988383772852751150510676265 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3862477608879013561449421598685699144244577726512579845286176205261000908883281531506533052456022884698743397375102858001727033032439307555208398725083884780633043464052024285472591331446345374554371488002888865925070800906490699475656981890 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[4066069676517664946455398612217503851836236895601958068437337655862239926458977042116524946148703745687600360257187404858133649228886274719313421512853816262121896956860629150509893861282929759556159780024498108519461585628112985854428561407 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1975273702990078466686656049735431065201317372462945622038203092207671843437049922710656975802000400007896274410224981953081822294812457595070526632788271212684209804698465284504898697099187477090126556977621827350399897856198875812640011560 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2362758793054550852286023702130978785078559386749974220022044984858833400357222939668721198198611318236178115798591179917518666195388546395684606191681077230905049788773447679364642330166171575565025673054535625852151236974551730896846959701 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[258143272011458652878661945939985180288841968959688399057694895583968066762373305850074720952751208645187292273382009804513150885388741714943673890177882814305799623754365496008182976207456648661579851660291363049895831060197448453164259363 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[4127619111928223577847058491831472831489135285005635186643315594953300591123541917204190015269042704622624322654752934405074372979081989009995068586587098049730462248558755269116067364297452752277544230228766820353243371766508766670767263594 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[403420107689087730219654161242062331332187926013011729645113061662634121109620410593190400880648407402075896086499325658824077940740127088921656528739945855832144661744317324764658921574592416195640263859999075217893533879271557396279792544 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2768245312469470547583102675899031818740026839254245712919095736181110364370962936884681582579230150566315357512868416900508674627355351529157224395502444261346929518962636460207887484367860475077926146720774986960481439501015074254800812130 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1935678574436645909308654785275796450905054389730032518096980932146989579935418792333785517620582060758322867195764765065437812586649022343526187566276060451877195770752634088244432143000932254802212768657944706273981708381207376564050947261 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[784585416955063227717398363083031205571941757027429853499836355554520478201705610359660329793567940583813769891250170533398672169245918377700854846760713809917173886707668518741451256469232081143418633082072890010136272114480019158020108017 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[208474324983895232752628070301109231299939281537864394231551311668606227560462543452539639773173234543827232498001844287609464462889716586708157140189273380438016125710746814264846202837423604806606236981275664801858601988375856849500504840 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3934530648017945830038969578624214966027014705197067969349228067313198757642372253875876846118511648674099385182160018891907106477504551088673344919196920427104811588160938215023926263046746925420111423796417586902734808470396868007069999262 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1722899025375273371920009506409654152276803705754182343459726651326808116750676593891934732464746779887244130310201147761966026935888628542118498451986699275727408165349240215244720376376196047774108346521373228871643104469854853735537191065 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1830991495223525529665947043656315380908079186462185420999888005147126703230548204557040117981201781046266588820921709452343716388353812315961444127006686274906197915285025196716774252448304493931103907013527802987975537877041193919968119134 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2524058814211727465677049381391660939626937931683307483631559907353723575105377703851915527190003653277498232080959840698671223268686386944500022868793999108353110088935502597304995228276766693379726274894970595261370776010753606497627374867 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1332634212791446482909200135338444455895569162370337912193459524245936196738435893894184682527104811940124502148244057651211961059229864308954667146016960789623986040926248022683517768391025531683348191341571506318597157745578208842509433670 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2749855193638523494161752954342783155704376142560954898867159190907593126339641823243627418269390072664604788496042626949508201177781804383120083623037155266995005112765073275919931267583389897251265497055027174995101908606887598427047528825 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2422817879579628721732944258141600663219447706803715139305505790951359091236280543077789953374215553848568454831941509026316907752262569051525267928949223935130131119720853357985076107169154054539187621681936299570244322654476146558153442400 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2723025113663683019094231266283624840770689259133429607352285879945097849308054515073071541528002168585613652144227543178227910224987006751722687566016217571939716328096213488646574511015916315018636180795270233185282637665556708538523334466 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3377232683389351587719728221920712434596028476443771286222147203492936908795071758353549150287614299830420250405131405337815091353663362521887189855970632982163063167841065132372410195130452858087313363479905871622552879632337126365665934690 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2261380252504394372623285370323107520383129695164844701510212512705927474399108323575781564342411378979865547349467694287777172389907299565762177963407613232676843049015566828972678450418930429908213925046654806162719595375245731819432482563 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[418096276089550381584362451249938225323356787903699709618463484984786973493476843173361587225026161808601975499808047180346909812590031795702559919079835962302356768246643405688809698939216824188992248930278382435969996064275798915841605476 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[474794990060167576185165824718260901902621935655331614125854789421764449118050957466415103797415529977546095611751299562617195486963410920397916462111720372882409825428913540270918343116459246507716106145172092962353757181735879748362587068 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[2898060891527935015382525716397905034341401979345963745872496143297222421221355784702261685859311735455278764640431523027240368897254031584425749749471580740027976343318785219183979722149219582956692306106693841639689828451946807145725846905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[4208517788663609391487617408438555435814063353318808427073658864138931569066247278885357057011459341388791679041734497499722764451598459632390829204148986416889655981887927330848940590944780929722042593609970034484479691030599907207723406706 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3822071328858758695479495887313794934838153144304865001145137055053723551093117459029186178001581999985117748960840852587915787745424685213473679572485008147932397889334452157197030264733210598323592424550219096328628337427343295277466313261 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[463445932388788056666141899760003590822050448594495020947967544734034656843663794709969586028955894129798562719009081766036203458978838980022618768693030895781599628093866742133636969519176389301980164692790593229143616031654959295197148376 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1805893273237280530018818149917778734299812844090123089476006298343250657408275772904580208741506848367296357114917728015389359274772170342063772606267940834504839227149810436105840652524976371766694012498516525182866246523524777856102227699 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[3057176042579988732582959040984813496766168438664540302223235311080596867214972224231854663477414531798890615329443506368694941400520327347882354701115389268747086046752798425651669074617879163279632901126456660607165678077198304928490855642 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1094457835189375744471153224489482686576334330416445817071351824202648664755422254830483849346673452582749286034058812897067814495025247593428719880232212179566863792495689172053316832526925778423730030436049050000788913151767905090899630548 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]\n"
                         "[1548398956110304428416991891000376989849032132327188166731674500232331939122917416015358125192808008305332787977231209197860701017981088552645792353035633867544124234552052288073427262415977392105474687811221158685885662817346197010204939456 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]\n"
                         "[3080498853408835041527759939878860589812998311332911833060214815748572920340097044109855015897994199835524508506208891962974589594215264270917928246472832863785214685192805518009629115713843831120124146348607491496328413845743510839154517398 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n"
                         "[1633346432127380641029257586065172576587517354066899887611576349069811221969094292810361432648601756797389630691481113041017750311548083212804958015386258926961218959181884314496283482299193631420281256373273139146718556782935086504584580905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]\n"
                         "[2101640406785011231044310461906914432131835358977276951252564202189943776080642980472338491830930849276310248171071683449257088910968932686878700440068435946880648729878063775774577535811384651465877814746132811772142550651461227038538742372 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]\n"
                         "[4333357990864602414012173895545835336584982871525001413735422607935914876361635334168199314298022643896482606583221661966068767969561502598397364708993644802327382912620722350118419825927823831412109317951537473025823135512603523680488701475 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]\n"
                         "[4148744465939576503791285336725622389346283183934396313401001526730704262334902466368954130148878844121683505542496288398658191178229780155485249721530751786512954972218673405658388651285303136647107371366600712443400895887006415021219866230 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n"
                         "[3288213611622731349725039935417685089896286979478041175711826678129988914469222254523372842503284083367334628952479742041944120978011746913940304132637637271897805003247599382410646482941031353112652736906104007483062776374538288683829393144 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]\n"
                         "[766309463327267446836280215871768524262383816763530930844758296846937268854706840114405949257390691107695057154608020815141746810050117147398473771644977438069900960087118957953979857461943662297798721872241379782158337859317039701608451483 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]\n"
                         "[4297439002415932595289271970709558546480073410104808691687385157297072958436885714793494653254177456049239921733110665294672578279409695611882812388108634505322418650834865534175260234499638367461958475890629219448804369532351200032635093516 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]\n"
                         "[308509128754938487036925223127642941289794368763317621139036741180763100641841466770175386153761808350847065490926215338785010318811003267460048525769150424489791100439230249206020263595045366028327836946874653508847765952376913775443986668 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]]\n");
    s >> B;
    return B;
}

linalg::math_matrix<arithmetic::Integer> makeMatrixLarge3()
// LLL-1.0 reduction of makeMatrixLarge2().
{
    linalg::math_matrix<arithmetic::Integer> B;
    std::istringstream s("[[305, 146, 337, -684, -492, -223, -523, 253, -519, -90, -1034, 326, -552, -350, -592, -555, 1295, 1350, 155, 806, -709, 540, 418, -586, 88, 796, -1326, 26, -859, 40, 869, 952, 346, -1322, -651, -667, -241, -327, -728, 406, -21, 697, 421, -475, -174, -167, 54, -613, -771, 323, 537, 663, -1098, 179, 154, 93, -100, 66, -460, 489, 302, 166, -48, 518, -435, 585, 629, -754, -8, -689, -7, -740, 576, 340, 217, 136, -103, 196, -126, 0], [-74, 414, -394, 147, -293, 795, -254, -526, -80, -286, -841, -381, 520, -133, -76, 420, -86, 779, -806, 886, -762, 110, 1372, -183, -970, -483, -847, 299, -367, 7, -117, 843, 233, -617, -1005, -1696, -8, -166, -640, -752, 1470, -77, 136, -82, 48, -161, 1601, -881, -562, 636, 561, 653, -710, 690, 181, 49, 34, -73, -105, 373, -916, -969, 91, 595, 177, -105, -47, 372, -687, -186, 51, -476, 438, 201, -50, -262, 131, 53, 224, 1], [72, -1432, -549, 291, 246, -630, -210, 637, 232, 2, 124, -153, -148, -639, 182, -687, 48, 621, 1432, -434, 518, 358, -726, 1103, -12, 338, 584, -1264, -584, 104, 128, -1117, 385, -229, 39, 341, 715, -824, 1128, 1654, 107, -645, 609, 372, -637, 649, -68, 61, 8, -234, 94, 13, -20, -1188, 776, -264, 699, -297, 190, -688, 999, 533, -618, -188, -97, 669, 405, -739, -482, -881, -306, -250, 475, -405, -50, 260, 258, -32, -52, 0], [-178, 529, 526, 30, 398, 412, 176, 1022, 115, 304, 774, 303, 425, 395, 807, 376, -526, -1164, 188, 34, -372, 44, -180, -622, -297, 210, 467, 662, -191, -324, -171, -517, -695, 1597, 229, 612, -660, 555, 415, -1314, -316, 722, 761, 87, 1593, 513, -1050, -26, 1742, 646, -363, -582, -302, 36, 108, 439, -25, 610, 653, -376, -948, 241, -397, 844, 172, -743, -670, -235, 344, 929, 406, -63, -743, 271, 310, 390, -377, 55, -239, -1], [-152, -155, -128, 299, -1247, -251, 361, -896, -50, -439, -138, -578, 536, 78, 330, 346, -55, 85, -596, -690, -493, -1015, -184, -718, -623, -195, -267, 365, 50, -877, -171, 667, -364, 128, -391, -1374, 143, -112, -776, 251, 206, 408, -582, -765, -790, -596, 17, -380, -929, -661, 1075, 761, -557, 132, -31, 244, -152, 119, -1772, 180, 153, 188, 1141, -224, -427, 738, 699, -174, 225, -440, -423, 249, 88, 433, -434, -189, -142, -350, 62, 0], [997, 255, -909, 597, 593, 94, -286, 834, -249, 773, 6, 881, 706, -696, -313, -178, -228, -556, -149, -412, -158, -85, 695, 17, 142, 465, 587, -1141, 137, 927, -112, -1118, -280, 1086, -648, 61, -262, 142, 1230, 116, 546, -960, 973, 357, 816, 410, 598, -746, 1010, 506, -337, 108, 544, 23, 500, -258, 270, 265, 1319, -725, -695, -1138, -399, 12, -673, -265, -596, -401, -932, 279, 23, -466, -60, 20, 244, 239, 273, -106, -30, 0], [317, -238, -1246, 1788, -672, 265, 1058, -355, -514, 322, 1119, -144, 1082, 616, 683, 17, -1779, -48, -364, -1157, -40, 311, 438, -299, -663, -223, 165, -39, 130, 517, -417, -270, -369, 1554, -433, -1231, -232, -423, 843, -64, 644, -91, -432, 118, 943, -150, 545, -912, 666, -387, -17, 644, -176, 55, 1185, 27, -255, -38, -344, -1278, -705, -405, 370, 89, -438, 484, -528, -459, -363, 609, -62, -609, -438, -582, 285, 393, -423, -92, -15, 0], [637, -19, -790, 351, -405, 72, 420, -46, -600, 375, 419, 213, 409, 300, -59, 138, -514, 723, 85, -971, -3, -445, -116, -1132, -416, 114, 212, 562, 19, 269, -8, 1703, 54, 1093, 63, -605, -72, 62, 799, 562, -553, 354, 697, -683, 244, -777, 309, -265, 260, -806, 529, -50, 446, -687, 328, 822, 352, -442, -733, -254, -858, -334, -14, -177, -765, 676, -642, -444, -898, -123, 237, 31, -301, -248, -106, 174, -77, -228, -269, -1], [-421, -897, 91, -98, 672, 338, -411, 656, 165, -133, 10, 142, 304, -279, -13, -517, 535, -213, 561, 295, 199, 807, -1839, -185, -263, 142, 500, -645, -896, -817, -454, -317, -409, -102, 678, 739, 599, 300, -98, 34, 784, 812, 309, 1057, 277, 1270, -113, -87, -391, 600, -186, -243, -1313, -345, -205, -667, 1139, 188, 625, 391, 761, 1543, -290, -232, 43, 478, 918, -448, 215, 459, 69, 61, 600, 35, -7, 27, -195, 292, -215, 0], [176, 73, -918, 943, -74, 363, 116, 252, -74, -229, -559, -355, 554, 1366, 201, -340, 40, 197, 60, 91, 347, 814, -667, -188, -878, -498, -257, 73, -663, 780, -393, 1051, 336, -281, 268, -817, -200, -20, 485, -505, 1222, 10, 12, 304, 137, 367, 1341, -792, -387, 140, 1076, -878, 153, 96, 202, 156, 484, -318, 705, 14, -396, 486, 261, -416, -256, 658, 19, 444, -256, -365, -845, -868, 448, -658, 693, -91, 57, 73, -67, 0], [184, 164, -750, 480, -607, 53, -58, 20, -321, -35, 1098, 244, 462, 207, -2, -181, -730, -590, 274, -1228, 305, -988, -167, 207, -93, -540, 702, 575, 231, -191, -809, -446, -238, 1023, -172, 781, 709, -239, 1337, 391, 596, -1202, -852, -189, -264, -580, 251, 387, 680, -791, 853, 270, 882, -1023, -520, 136, 526, -620, -136, -1348, 707, -317, 56, -1059, -1014, 411, 35, -449, -766, -287, -698, 157, -154, 530, 420, -234, 54, -388, -219, -1], [-17, 419, -638, 195, 462, 454, 401, -678, -466, 623, -356, 192, 387, 688, -528, 937, 135, -332, -259, -373, 1081, -1085, 4, 45, -2, -595, 576, -892, 591, 680, -39, 83, -535, -165, 19, -1351, -277, 643, 11, -245, 702, -323, -306, 201, -393, 205, 1095, 6, -858, -733, -344, -1251, 1330, 884, 39, -259, 178, 29, 742, 1214, -675, -1006, -683, -538, 83, -339, -102, 948, -277, 348, 127, 990, 391, -19, -858, 48, 694, -114, 292, 1], [36, 186, -457, 561, 309, 5, 75, 21, -825, 440, 484, 552, 722, -955, 560, 386, 303, -199, 1030, -673, 1086, -26, -965, 53, 122, 111, 1426, -722, 329, -381, -470, -1281, -694, 586, 15, -180, -145, 484, 422, 583, 745, -20, 871, -33, 818, 812, -128, -979, 916, 115, -313, -109, -854, -724, 247, -499, 241, 768, 1232, -595, 79, 12, -781, -83, -16, 459, 567, -609, 241, 1200, 740, 534, 229, -74, -179, 294, -52, -72, 72, 0], [-755, -677, 225, -352, 166, 278, 35, 657, -35, -583, 238, -2, 26, -205, 718, -209, 283, -330, 596, 212, -315, -32, 212, 873, 230, 578, -371, 246, -968, -1263, 1044, -1381, -262, 203, -448, 462, -231, -822, -164, 338, -937, 455, -304, 128, 489, 1008, -1748, 293, 197, -788, -213, 214, -329, 103, 785, -167, -28, -18, -379, 24, 520, -250, -1405, 621, 278, -470, 1132, -1038, 928, -600, -735, 39, -27, 902, -191, 1137, 147, -145, -21, 0], [-636, 196, 694, -1003, -826, 27, -537, -313, 289, -55, 6, -115, 252, 128, -776, 1097, 617, 867, -235, -339, -136, -1619, -361, -1107, -380, -185, -111, -23, 353, -417, 371, 1517, -423, -537, 46, -1127, 24, 1005, -934, 183, 764, 1052, 404, 347, -1217, 328, 6, 88, -1427, -290, 99, 406, -487, 205, -393, 540, -390, -387, -981, 1399, -39, 597, -24, -505, -373, 919, -278, 384, -575, -18, 201, 843, 220, 584, -946, -433, -164, 159, -114, 1], [531, -469, 108, 364, 471, 370, -423, 1007, 175, -196, 351, 526, 382, -460, 121, -431, 203, -1345, 472, 94, -556, -593, -965, -582, 336, 402, 685, -522, -680, -680, 6, -1482, -1453, 1276, 87, 230, 277, 417, 86, -379, -964, 299, 581, 320, 130, 371, -653, -272, 949, -330, -355, 593, -244, -468, 598, 112, 831, 898, 54, 497, 748, -141, 6, 431, 18, -450, 1495, -1231, 791, 16, -52, 505, 381, 852, -359, 58, 138, -156, -161, -1], [-515, 158, 315, 480, -1003, -487, -689, 174, 353, 131, 398, -860, -330, 181, 713, -180, -547, 1203, 1412, 61, -61, -479, -214, -302, 36, -696, -725, -434, -710, 170, 108, 40, 256, -685, 31, -928, 46, -111, 407, 520, 551, -89, 441, 566, 47, -49, 253, -918, -378, -52, 139, 1019, -725, -213, 759, 377, 49, -315, -500, -417, 400, 816, 221, -183, 40, 1451, -131, -505, 173, -836, 174, -804, 810, 77, 153, -324, -67, 11, 8, 0], [-478, 96, 538, 199, -231, -816, -233, 954, 622, -221, 114, -437, -16, -485, 873, -243, -616, -206, 986, 285, -741, 355, 209, 139, 26, -380, -648, 150, -761, -806, -493, -989, 793, -249, 501, 493, 580, -727, 418, 343, 566, 436, -181, 679, -28, 841, -143, 91, -39, 1250, 921, 507, -1189, -460, 307, -69, 35, -237, -293, -622, 1054, 943, 56, 817, -281, 633, -426, -257, -57, -623, -509, -1377, 504, 700, 880, 100, -297, -26, -252, 0], [274, -891, -450, 141, -868, 8, -356, -240, -23, -538, -754, -992, 695, -136, 175, -55, 455, 346, 71, 407, -209, -185, 289, 284, -608, -590, 123, -296, -1118, -570, -84, -135, -451, -956, -1007, -605, 32, -189, -109, -332, 1540, -504, -643, -795, -377, -5, 212, -595, -636, -209, 1627, 862, -948, 36, -480, -327, 1123, 353, -146, -68, 642, -97, 708, -374, -328, 796, 1509, -335, -350, -1861, -761, -974, 926, 182, 162, -589, 778, -243, 245, 0], [739, -149, -16, -1058, 1398, -405, -1011, 638, 891, 678, 796, -10, -733, -439, 60, -311, -1504, -54, 791, -110, -398, -363, 563, 284, 69, 153, 559, -157, -81, -307, -559, -1040, 969, 967, 838, 1067, 697, 23, 1041, 498, -416, -467, 611, 461, -687, -128, 226, 1367, 1036, 702, -395, 483, 1124, -1177, 241, 559, 840, -618, 102, -155, 394, -113, -951, 107, 518, -1001, -1078, -216, -475, -323, 589, -241, 92, 39, -327, -444, 79, 11, -51, 0], [-58, 28, 733, -76, -872, 289, -692, 146, 550, -1034, -286, -840, -126, -189, 127, 977, 461, 777, 733, 602, -112, -193, -165, -195, -87, -115, 12, 1002, -722, 31, 723, 1330, 9, -699, -113, 855, -25, -396, 20, 37, -511, -265, 840, -466, -391, -598, -128, 157, 205, -949, 1139, 841, 395, -543, -669, 1066, 26, -301, -263, -615, 330, -494, 1040, -523, -477, 377, -178, 523, 173, -1801, -432, -57, -397, 47, 515, -35, 335, -445, 6, -1], [-164, 2, -171, 289, -38, 130, 628, 34, -323, -117, 421, 434, -438, 1249, 705, -64, 28, 303, 857, -303, -63, 539, -1235, -1621, -435, 315, -434, 320, -924, -529, -205, 1973, 352, 17, 781, -119, 314, 348, -317, 77, -1014, 1960, -354, 43, 1, -430, -237, 716, -749, -792, 40, 302, -384, -430, -166, 180, 203, -559, -1418, 404, -206, 792, -257, -538, -4, -45, 53, -293, 1315, 508, 272, 567, -20, 315, 47, 1035, -545, 117, -221, 0], [-373, 667, -702, -812, 785, -136, -348, 358, 1058, 622, -179, -557, 689, -1839, 187, 1400, -982, 597, -502, 273, 75, -361, 998, 533, 48, -61, 964, 138, 424, -571, 442, -257, 1031, 848, 383, 266, 58, -165, 351, 625, -553, -310, 1329, -122, 673, 789, 524, 102, 192, 309, 78, 341, 842, 392, 431, 246, 353, -142, 785, -221, -1383, -1308, -509, 643, -11, -578, -1180, 601, -731, -996, -47, -471, -100, 491, -428, 197, 678, -491, 448, 1], [-598, -961, -1, 507, -46, 80, -273, 996, 1340, -402, 605, -112, -68, -9, 583, 497, -416, -286, 971, 25, 527, 1020, -1461, 974, -807, 330, 792, -802, -277, 56, 118, -469, -258, 234, 426, 807, 242, 596, 214, 12, 136, -340, 1277, 406, -665, 966, -61, 359, 1337, -205, -346, 9, 122, -971, 637, 83, 499, 583, 765, -178, -297, 883, -517, -159, 776, -754, -680, 742, 551, -73, -689, 672, -520, -892, -108, 136, -475, 358, 153, 0], [-487, 19, 142, 1199, -304, 95, 145, -1294, -53, 259, -315, -193, 563, -817, -234, 1138, -691, -1223, -1524, -409, 77, -1037, -1088, 298, -670, -510, 67, -781, 384, -568, -935, -710, -474, 289, 318, -942, 731, 52, -665, -26, 1052, -202, -1021, 171, -249, 320, 1343, -402, -890, 0, 875, -450, 418, 1001, 312, -842, -160, 801, -658, 536, 195, 91, 950, -788, -792, 311, -392, 1179, -373, 723, -414, 843, -105, 564, -707, 0, 128, -459, 281, 1], [-290, 683, -385, 33, -80, 964, 76, -826, -559, -146, 918, 448, 806, -103, -80, 938, -176, -704, -732, -322, 381, 62, 736, -509, 120, -500, 328, 119, 832, -818, -601, 132, -595, -155, -785, -48, -36, 544, -694, -491, 1302, -241, -1457, -618, -186, -97, 258, -38, -652, -595, -304, 132, -586, 260, -1081, -915, 1022, -253, 377, -10, -593, -636, 271, -1168, 137, -442, 446, 276, 126, 940, -58, 827, 118, 232, -58, -116, 416, 112, 151, -5], [-521, -596, 504, -4, -966, -52, 85, 619, -600, -303, -424, 99, 531, 393, 287, -64, 1024, 919, 782, 373, -3, 289, -941, 734, -48, -222, -664, -294, -895, 49, 736, 277, -1086, -477, -714, 52, -816, 134, 187, -344, 1279, 182, 860, 112, 395, 597, -586, -933, 153, 288, 553, -46, -1391, -90, 263, -248, 417, 124, 652, 492, 782, 857, -1199, 641, -402, 1028, 505, -697, -435, -268, -479, -1059, 453, -735, 627, -204, -417, 384, -194, -1], [218, 1330, 582, -805, -209, 246, -388, -302, -705, -42, 318, 382, -1399, -101, -227, -578, 717, 815, 1226, 365, 358, 423, 850, -199, 940, 793, -832, 971, -604, 8, 1056, -618, 11, -916, 128, 253, -1128, -514, -828, 702, -896, 17, -291, -260, 785, -303, -697, -119, 424, -766, -959, 199, -489, 254, 338, -101, -605, 172, 356, -502, 588, -147, -512, 663, 41, -483, 1188, -326, 1627, -463, 115, -195, -70, 15, 377, 602, 102, -36, 284, -5], [-118, -421, 540, -21, -1213, -1247, 887, 241, 768, 387, 356, -717, -98, 579, 313, -442, -329, -430, -352, -25, 325, 856, 439, -34, 1218, -267, -638, -894, 395, 728, 271, -459, 164, -484, 98, 408, -267, 42, 261, -420, -1547, 240, -1032, -426, 40, -957, -1035, 633, -473, 5, -967, -99, 32, 773, 233, -364, -605, 252, -690, -157, -51, 572, 1179, -93, 744, 315, -428, -100, 462, 76, -40, -368, -170, -409, 234, -378, -274, 112, -245, -1], [57, 635, 812, -669, -777, -849, 631, -408, -315, 40, -7, 121, -26, 158, -282, 673, 1386, -246, 41, -169, 1238, -760, 5, -479, 1241, -341, 354, 429, 948, 42, 173, 867, -520, -176, -109, 28, -588, 851, 162, -143, -897, -169, 25, -1740, -1082, -1203, -443, 169, 16, -685, 126, -1269, 909, -629, -1296, 296, 405, 180, 53, 666, -228, -481, 145, -423, -169, -366, 138, 929, 129, -73, -745, 1152, -152, -249, 31, -690, 499, -258, -5, -7], [-24, 409, 1200, -983, -352, 92, -144, 50, -133, -735, 197, 628, -635, 533, -166, 191, 965, 807, -10, -522, -880, -905, -370, -336, -564, 834, -813, 1140, 50, -732, 1408, 872, -674, 562, -91, -702, -1006, 171, -835, 736, -1074, 589, 803, -1321, -566, -399, -1527, 91, 461, -703, 282, 11, 311, 32, 218, 951, -330, -175, -1453, 496, -94, -139, -634, -18, -46, -370, 347, -476, 528, 37, -752, 941, -710, 171, -17, 432, -220, 94, 115, 0], [681, -203, 292, -513, 275, 1379, -476, -50, -139, -597, -141, -184, 206, 275, -1061, -825, 360, -705, -344, 614, 216, 930, -342, -310, 377, 8, 389, 786, 69, -293, 47, 224, -678, -421, 543, 2157, -256, 1015, -272, -725, -319, 43, -144, 561, 759, 232, -432, 588, 418, 241, -550, 717, 11, 314, -1422, 61, -477, -215, 315, -329, 767, -294, 369, -939, 208, 69, 1086, -230, 306, 474, -112, 91, -604, 223, 323, -323, -219, -59, -62, 5], [-344, 583, -160, -267, 151, 65, -47, -362, 103, 300, 81, -178, 644, 597, 923, 76, -677, -913, -1199, -56, -273, -316, -829, -270, -754, -175, 256, 725, -141, -562, -708, -167, -439, 1504, 885, -40, -316, -119, -468, -1099, 295, 911, -80, 173, 1024, -260, 473, -167, -63, 474, -478, -438, -4, 664, 258, -333, 296, 648, 291, -412, -474, 1009, 715, 850, 167, -706, 377, -181, 1103, 1230, 663, 342, -705, -705, -127, -244, -891, 36, -150, -6], [197, 1122, 82, -373, 802, 55, 105, -1348, 324, 34, 65, 1119, 291, -691, -806, 1200, 150, -493, -1298, -655, 301, -305, 890, 694, 819, 35, 805, -261, 1960, 164, -207, -1207, 2, -239, -99, -134, -436, 805, -966, -180, 850, -1024, -545, -271, -843, -199, 363, 228, -195, 597, -333, -86, 551, 1080, -930, -783, -619, 228, 971, 586, -342, -1055, -74, -539, 510, -320, -298, 824, 60, 1467, 287, 224, -1, 78, -165, -489, 377, 31, 187, 2], [416, 524, 189, 858, -949, -174, 693, -1139, -627, 451, 292, -81, 577, -661, 383, 804, -1310, -462, -199, -686, -450, -608, 1451, -509, 474, -176, -562, -797, 215, 232, -561, -679, -321, -226, -429, -987, -403, 240, -276, -147, 625, 710, -899, -211, 78, -459, 889, -412, -998, 385, 33, 1057, -479, 1389, -46, -511, -900, 522, -1038, -805, -533, -1012, 1211, -86, -416, 591, -890, 159, 316, 808, 740, -540, -305, -112, 56, -44, -325, -263, 82, 1], [-51, -166, -229, 91, -753, 181, -777, 792, -9, 542, -532, -23, 123, -367, -552, -1022, 1023, 165, 456, 71, -673, -430, -929, -1683, -199, 576, 128, -371, -1116, -110, 199, 678, -635, -204, -613, -327, 441, 482, 904, -641, 377, 115, 1125, 224, 715, -434, 481, -968, -237, 236, 293, 1004, -588, -496, -293, 399, 891, 260, -391, -170, -87, 876, 511, 262, -981, 782, 597, -829, -395, -504, -294, -231, 601, 1730, -197, -155, -154, -458, -554, 2], [17, 444, -968, 423, -94, 14, -55, 1411, 97, 578, -700, -198, 762, -216, 290, 594, 319, -173, 18, 202, 155, -179, 84, -278, -618, -529, 681, -771, 714, 1045, -26, 531, 144, 32, -282, -807, 275, 339, 1157, -273, 959, -569, 1552, 322, -262, 216, 1174, -365, -79, 268, 226, -720, 739, -937, 84, 39, 367, -158, 1407, -63, -1172, -143, 79, 495, -108, -305, -775, 351, -976, -334, -394, 382, 203, -49, 171, -357, 281, -40, -343, -2], [752, 23, -992, 503, 1342, 1472, 233, 150, -1046, 438, -13, 594, 324, 304, -4, -594, -1215, 48, 42, -12, -634, 338, 502, -84, 2, 31, 348, -280, -496, 740, -160, 215, 2, 1197, 58, -137, -7, -84, 1312, -572, 264, -67, 456, 952, 893, 530, 1260, 20, 628, -55, 46, 579, 1040, -120, 222, 79, 17, -523, 712, -617, -946, -1247, -1078, 258, -320, -290, -409, -587, -445, 474, 360, -988, -174, 18, 427, 493, -231, -449, -116, 5], [-838, -208, 684, -250, -100, 163, 173, 273, -258, 150, 983, 350, -362, 277, -839, -709, 770, 28, -1064, 473, 575, 833, -463, -335, 390, 541, -385, 639, 79, 317, 333, 585, 95, 360, 526, 747, 400, -247, -449, -355, -301, 886, -363, 542, 869, 565, -1303, 122, 247, -54, -700, -1282, -627, -194, 331, -649, -326, -72, 226, 153, -397, 1879, -504, 494, -33, 194, 385, -118, 67, 516, -111, 598, -588, -67, 425, 323, -94, 268, -563, -7], [-477, -810, 313, 602, -853, -144, 708, -438, 486, -785, -373, -94, -110, 562, -179, 345, -561, -1, -155, 226, -39, 412, 506, 253, -227, -204, -779, 461, -600, -460, 38, 434, 160, -1294, -624, 222, 372, -594, -1102, 237, 776, 13, -1588, 336, -1246, 344, -430, 330, -821, -37, 642, 1042, -894, 248, -461, -40, -978, -223, -1099, -359, 1053, 310, 1239, -161, -391, 684, -254, 404, -259, -727, -673, -434, -352, 318, 357, 228, -537, 184, -238, 2], [178, 739, 328, -793, 114, -54, -141, -553, 637, -806, -670, 23, -176, 74, 559, 424, 1006, -443, -576, -499, 427, 126, -595, 304, 583, 235, 348, 1087, 448, -801, 177, 256, 629, -545, 600, 587, -501, -678, -904, -22, -946, -333, -38, -1478, -1294, -471, -852, 473, -418, -743, 1137, -1146, 779, -695, -735, 163, -401, 92, 94, 430, 5, 281, 541, -150, 534, -494, 398, 813, 1056, 374, -772, 805, -618, 15, 278, 160, 84, -554, -453, -7], [467, -830, -67, -838, 240, 36, -290, 1253, -313, 334, -925, 661, -583, 700, 54, -1324, 1185, -68, 506, 60, -283, 169, -1255, 46, -262, 585, -150, -775, -1176, -148, -84, 65, 243, -527, -401, 444, 42, 297, 296, 263, 447, -96, 798, 29, -55, 177, -751, 199, -151, 375, 291, -908, -383, -935, -405, -436, 271, 256, 38, 530, 745, 1577, -879, 74, 89, -298, 619, -1086, -56, -106, 342, -308, 71, 51, 2, 205, -463, 195, -253, -5], [146, -770, -1070, 676, 1117, -885, 558, -474, 603, -160, -265, -914, 73, 175, 690, -437, -447, 364, -169, 20, 529, 612, -994, 1010, -881, -607, 1080, 255, 608, -57, -666, -303, 677, 351, 1178, -415, 383, 316, 263, 41, 176, -222, 11, 334, -397, 611, 403, -15, 237, 800, 16, -297, 586, -717, 105, -395, -342, -331, 54, -152, 89, 1118, 66, -18, 722, 265, 1122, 726, 449, 83, -755, -401, 299, -1104, 356, -417, 363, 74, 462, 7], [219, 81, 821, 524, 724, 418, -735, 327, 261, -623, -543, -68, -203, 1059, 504, -399, 850, -1751, 438, 207, -533, -188, -1518, -1687, -299, 1010, -128, 173, -462, -929, 55, 581, -223, -12, 1011, 669, -465, 346, -1020, -328, -927, 1183, -174, 80, 108, 573, -1110, -13, -600, -344, 318, -232, -522, 260, -424, 432, 209, -148, -849, 556, 425, 1217, 614, -709, -601, -126, 927, -96, 1657, -3, -1003, 370, -162, 621, -179, 642, 306, -165, -126, -35], [612, -77, -484, -327, -280, 746, 295, -269, 860, -1278, -788, -464, 954, 74, 29, 294, 665, 262, -1706, 7, -1418, 251, 934, 70, -189, -65, -708, 317, -456, -394, 321, 130, 254, -231, -376, -1328, -659, -272, -679, -852, 165, 573, -793, -163, -490, 533, 86, -364, -1729, 145, 737, -61, -753, 719, 273, -477, -742, -168, -988, 1216, -15, 401, 1061, 105, 81, 562, 840, 114, -234, -280, -1112, -1440, 248, 246, 22, -20, 246, -340, -181, -3], [76, 442, -123, -1098, 743, 522, -28, 343, -778, 326, -768, 281, 511, -1030, -301, -339, 346, 253, 417, -45, -272, 679, 697, -562, 373, 909, -621, 171, -668, -388, -119, 81, 400, -635, -479, 652, -64, -17, 55, 224, 614, 487, 654, 671, 863, 486, 160, 234, -303, 867, 277, 154, -710, 649, -158, 67, 221, -541, 740, -81, 92, -680, -535, 643, 18, -166, 8, -590, -379, 157, 992, -1066, 234, 970, 214, 393, -175, -271, -364, 38], [992, 377, -935, 156, -1008, -1490, -296, 210, 696, 322, 251, -44, -87, 317, 156, -534, 29, 49, 1146, -816, 806, -516, -272, 566, 832, -237, 104, -1407, 133, 1483, -15, -361, 371, -428, 436, 1474, -341, 240, 1103, 300, -351, -994, 0, -193, -1045, -572, -209, 241, -135, -340, 422, 1275, 898, -685, 208, 129, -134, -641, 103, -873, 1192, 257, 609, -850, -179, 880, -276, -66, -127, -1450, -406, -669, -23, -241, 156, -481, 52, -209, -430, 180], [-549, -46, 789, -540, 91, -589, -889, 1104, 468, -333, -481, 365, -918, -1170, 190, 128, 1227, 840, 1107, 323, -845, 509, -738, 301, -774, 974, -9, -797, 293, 855, 254, 468, 858, -835, -299, 395, 280, 45, 413, 816, -512, 216, 1273, -10, -527, 516, -34, 493, 292, 348, 425, -583, -249, -1117, -248, 493, -728, -88, 108, -395, -164, 651, 440, 61, -111, 7, -451, 483, -1149, -594, 81, 2, -443, 92, 151, 279, 126, 124, 108, 34], [-1298, -309, 269, 479, -285, 213, 93, 334, 670, -379, 504, -373, 505, 1052, 931, 461, -482, -90, -411, 64, -460, -426, -978, 803, -1898, -346, 12, 247, -160, 441, -100, 572, -181, 1381, -226, -476, -26, -505, 245, -464, 379, -73, 775, 628, 875, 979, 153, -306, 851, -405, 306, -1304, 123, -13, 1070, 757, 27, 61, -177, 15, -871, 1069, -118, 758, -24, -9, -668, 529, -952, -457, -128, -165, -337, -741, -112, 449, -266, 136, 451, -7], [-56, 163, 644, -566, -652, 121, -415, -341, -236, 581, 902, -328, -288, -472, -27, 110, -261, -902, 270, -11, -352, -547, -64, -796, 168, 931, -1004, -334, -355, -1051, -296, -1071, -543, 409, -689, 293, 130, -269, -303, 367, 311, -60, -550, -2, 180, -483, -101, 95, -102, -303, -546, 390, -262, -81, -36, -155, 798, -68, -1216, 95, 840, 471, -39, -102, -616, -889, 753, -232, 604, -123, -67, 774, -50, 972, -642, 322, 436, -328, 181, -156], [398, -91, 222, -631, 87, 11, -417, 160, 808, -216, -575, -298, 101, -1421, -6, -243, 687, -14, -923, 205, -1342, -376, 1854, 196, -1032, 793, -192, -361, -152, -534, -419, -1944, 610, 259, -1133, -1325, 34, -705, -328, 358, 500, 212, 120, -199, -36, 263, 452, -540, 72, 1615, 350, -388, -1139, 448, 127, 63, -440, 640, -872, -47, 85, -697, 719, 837, -122, -845, -85, -169, -925, 96, -312, -345, -41, 490, -670, 209, 234, -128, 331, 9], [-178, -1061, -300, 326, 180, 334, -189, -300, 526, 876, 943, -912, -475, -34, 222, 114, -1830, 834, 369, 370, 95, -363, -93, 598, -1491, 61, 660, -327, -472, 425, -262, -141, -320, 811, -64, -747, 552, -353, 556, -523, 18, 200, 805, 98, 162, -71, 909, 531, 1079, -280, -576, 278, 934, -352, 1161, 859, 927, 181, -435, -424, -938, -287, -461, 1198, 589, -1273, -879, 390, -702, 116, 867, 417, -561, -886, -1075, 77, -49, 166, 403, 162], [-486, -330, 429, -738, 116, 375, -36, 773, -377, 630, 1231, 461, -760, 474, -190, -339, -702, 311, 471, 53, -112, -1001, -417, -110, -237, -3, -63, 800, -934, -822, 766, 5, -912, 895, 714, 587, 20, 1161, -21, -579, -791, 1052, -290, -575, 599, -260, -1344, 676, 1028, -493, 99, 505, 312, -76, 330, 172, 522, 360, -825, 513, 371, 754, -1388, 527, 363, 218, 355, -1222, 421, -670, 34, 238, -209, 718, -372, -77, -341, 36, -360, 164], [-611, -283, -299, 334, 437, 695, 10, 563, 257, -882, 659, 15, 277, 454, 464, -696, -155, -997, 762, -208, 653, 648, -907, 603, 180, -469, 157, 828, 506, -793, -982, -907, 263, 152, 271, 379, 556, -328, 310, 269, 970, -647, -151, 1325, -777, 1579, 63, -22, 851, 249, 190, -904, -458, -1512, -650, 604, 43, -294, 878, -19, 1007, 560, -339, -167, 608, -50, 819, -35, -89, 1018, -209, 307, 275, 208, 56, -123, -585, 61, -107, -81], [-162, 492, 6, -390, 271, 498, -599, 147, 41, 114, 611, 125, -162, -647, -240, 414, 10, 792, 644, 536, 522, -723, 285, 943, 297, -210, 467, 766, 223, -312, 921, -916, 148, 97, 116, -70, 453, -238, 1080, 497, -177, -763, 619, -171, 390, -229, 826, -214, 382, 13, -578, 789, 1306, -529, 54, -8, 373, -896, 7, -900, 580, -901, -866, -53, 118, -103, 524, -879, 147, 29, -300, 424, 341, 832, 66, 253, 373, -307, 172, 32], [117, 741, 364, 389, -673, -1395, 678, 819, 453, 40, 73, 20, 609, 540, 686, 687, -447, -1775, -1561, -829, -286, -28, -525, -45, 157, 128, 10, -251, 1421, -274, -119, -751, -397, 1437, 744, -467, -669, 375, -154, -400, -788, 437, -542, -1005, 123, 629, -1191, -80, 455, 149, 245, -310, 242, 201, 671, -241, -803, 1040, 266, 129, -115, 910, 1183, 29, -274, -141, -749, -58, 623, 1426, -448, -62, -383, -318, 44, -79, -762, 152, -183, -166], [-244, -98, 400, -968, -5, -531, -791, -1161, 112, 1011, -654, -39, -631, -1229, -354, 1078, -391, 1666, -287, 397, 75, -3, -562, -458, 112, 410, -118, -821, -305, -495, 347, 428, 538, -792, 135, -921, 298, -198, -654, 536, 73, 56, 428, -1009, -584, -972, 1023, 205, -530, 162, 864, 803, -271, -158, -195, 230, 1291, 810, -158, 1114, 122, -249, 99, -29, -187, 107, -239, 157, -584, -135, 1068, 151, 626, 445, -1025, -348, 516, -61, -17, -140], [-55, -433, 325, -657, 252, -59, 9, 548, -6, -257, 937, -400, 421, 1175, -15, -445, -531, 361, -192, -15, 453, 759, -837, -600, 738, 50, -154, 1395, -143, 102, 18, 357, 244, 578, 905, 679, -316, 585, 414, -231, 126, 821, 56, 923, -177, -77, -664, -9, 508, 352, -186, -268, 92, -725, -380, 897, -119, -612, 534, 298, 594, 1207, -424, -310, 486, 900, -86, -295, 348, 282, 97, -820, 41, -1028, 708, -865, -632, 302, -304, -69], [-123, 608, 398, -1138, 932, 594, -937, 67, 541, -1, -320, -467, -495, 735, -675, 188, 483, 429, -361, 1340, 663, 290, -528, 29, -750, 539, -358, 390, -250, 219, 760, 990, 428, -845, 886, -420, -449, 246, -733, -366, -1066, 1125, 553, 247, -585, 379, 930, 251, -488, 44, -193, -948, 1074, 361, 240, 1226, 20, -353, 473, 866, -72, 89, 435, -811, 481, -507, 267, 20, 817, 41, -192, 684, -108, 20, -680, -30, 299, 337, -58, -59], [588, 447, -2, 16, 650, 811, 197, 926, 444, -129, -143, 229, 499, 415, -63, 927, -96, -1712, -531, 299, -904, -439, -14, -1470, -1149, 566, 638, 250, 129, -229, -189, 828, -883, 1042, -44, -328, -365, 300, -376, -712, -587, 379, 1192, -441, -69, 535, 355, 259, 458, 231, 53, -1064, -44, -184, -407, 632, 354, 526, 234, 216, -1424, -448, 1118, 826, -408, -1200, -458, 579, -86, -247, 42, 465, -683, 451, -192, 517, 339, -166, 394, -98], [-415, 468, -146, -142, -808, 140, -629, -638, 68, -811, -235, -994, -573, 953, 301, -584, 265, 333, -681, 464, -225, -631, 953, 223, -593, -1070, -791, 1273, 247, 1, 83, 871, 530, -501, -124, -1204, -977, -95, -803, -752, 496, -317, -507, -819, 297, -83, 55, -985, -108, -632, 581, 315, 19, 106, 131, 417, -488, -173, -1, 54, -197, -265, 148, 622, 530, -563, 578, 808, 494, -750, -590, -326, -224, -208, -271, -341, 178, 160, 442, 163], [-196, -33, -363, -170, 1248, -211, -685, 557, 857, 108, 174, -226, 378, -1792, 460, -13, -479, -465, 336, 55, 202, 39, -374, 126, 402, 642, 809, -594, 205, -1282, -527, -1483, 535, 347, 480, 785, 272, 1131, -374, 848, -107, 242, 618, 1031, 102, 1755, -492, -319, 370, 889, -580, 279, -1073, -306, 182, -648, -125, 414, 350, -70, 215, 733, 220, -432, 441, 198, 268, -345, 250, -174, 70, -461, 338, 454, -352, -120, -142, -195, 450, -192], [164, -490, 485, -211, -252, 101, -1447, 161, 137, 58, -159, 273, -225, 406, -879, -813, -244, 987, -37, -1, -830, 37, -171, -30, -322, 94, -534, -337, -101, 265, 885, 713, 328, -476, -24, 245, 17, -134, 1023, 783, 537, -849, 510, 384, -189, -447, 434, -53, -245, -117, 733, 437, 574, -458, -31, 77, 1089, -1131, -311, -209, 504, 755, -376, -868, -504, 1535, -708, -1101, -1594, -542, -642, -1099, 330, -445, 307, -443, 10, 217, -386, 45], [-409, 77, -560, -519, -846, 253, 77, 1002, 99, -270, 22, -803, 29, 23, 650, -431, -125, 1421, 1186, 319, -31, 1022, 648, 672, -67, -15, -725, 985, -943, -212, 700, -434, 300, -630, -776, 201, -58, -961, 324, -145, 578, 397, -9, 896, 978, 846, -396, 64, 355, 489, 433, 821, -920, -138, 236, 339, -499, -431, 338, -502, 41, 390, -654, 899, 113, 1041, 28, -728, 152, -793, -430, -1435, 792, 670, 606, 169, -434, 112, -449, 174], [71, 442, 1130, -495, -276, -556, 352, -219, 260, 995, 466, 54, -878, -805, -122, 146, -1020, -39, 50, -816, 391, -338, 166, -146, 1505, 331, 435, -325, 1029, -90, 775, -481, -481, 70, 251, 891, -511, 1029, -400, 67, -1484, -386, 92, -598, -154, -496, -1174, 997, 321, -200, -619, 610, 603, 154, -818, 224, -343, 875, -197, -139, -455, -293, 959, -149, -126, -346, -1181, 275, 441, 22, 301, 305, -289, 346, -159, -545, -389, -247, -140, -54], [-441, -181, -109, -105, -244, -490, 326, 172, -155, 710, 874, -7, 353, -1278, 153, 228, -463, -96, 911, -886, 434, -715, -786, -562, -195, 108, 563, -244, -142, -685, -929, -195, -47, 430, 107, 565, 1188, -30, 656, 1302, 685, 134, 460, 326, -615, 324, 495, 72, -303, 82, 296, -524, -180, -1196, -638, -165, 977, -545, -432, -1402, 93, 631, 861, -206, -996, 544, 296, -204, -698, -434, -34, 583, -56, 362, 194, 155, 495, -715, -119, 21], [1338, 563, -419, -12, 501, 769, -484, 5, -757, 897, 4, 211, -323, 425, -43, 227, -176, -118, -130, 463, -692, -1106, 171, -1312, -420, 400, -103, -69, 87, 412, -363, 1186, -1174, 968, -595, -546, -1009, 795, -104, -609, 226, 569, 204, -178, 556, -857, 723, -469, 252, -110, -226, -245, -87, 327, -824, 230, 1012, 46, 295, 761, -842, -554, 689, -183, -802, -463, 173, -725, 101, -66, 592, -303, 66, -931, -515, -779, 305, 20, -2, -63], [440, -424, 231, -401, 897, 102, 512, 275, -569, 170, 358, 846, 155, -138, -229, 510, 180, 73, 622, -386, -123, 337, -109, -249, 636, 64, 983, 451, -350, -162, 423, 39, -268, 766, 799, 875, -128, 343, 330, -329, -266, 1430, 341, -100, 391, -31, -326, 723, 830, 194, -282, 143, 61, -125, -136, -9, 356, 326, 253, 796, 287, -564, -1480, 652, 367, -306, -449, 27, 28, 520, 915, 177, -44, -29, 340, 417, -97, -135, -105, 97], [682, -1364, -553, 156, 350, -103, -103, 1686, -99, 365, 924, 142, -460, 315, -612, -1384, -265, -191, 531, 201, -406, 671, 493, 332, -21, 34, 373, -474, -188, 484, 252, -1054, -290, 77, -65, 733, 307, 160, 686, -700, -222, 671, -665, 516, 532, 899, -984, 192, 401, 761, -826, 666, -1003, -284, -25, -331, 55, 414, 218, -716, 535, 652, -296, -19, -140, -190, -66, -1046, 13, 180, -29, -648, -50, -62, 238, -123, -164, 1025, 136, 99], [-97, 995, 1088, -386, -876, -71, 92, 194, 377, 349, -201, -307, -780, 739, -51, 162, -364, 58, -270, 685, -333, 206, 1133, -935, 444, 348, -1114, -161, 532, 747, 921, 254, 300, -508, 11, -440, -374, -229, -713, 344, -646, 429, -927, 48, -665, -150, -402, 211, -532, 99, -490, 1160, -260, 772, 343, 140, -1338, -359, -512, -615, 382, 336, 1415, -60, -357, -330, -1, -732, 1100, -448, -222, -342, -462, 321, 587, 178, -233, 116, 17, -71], [593, -461, 641, 170, -309, -1300, -423, -114, 258, 38, -47, -421, -1213, 440, 360, -1704, -774, 387, 657, 481, -6, 247, 301, 808, 701, -306, -865, -504, -373, 413, -266, -1199, 1185, -695, 75, 275, 181, -865, 414, 828, -590, 64, -766, 770, -963, -423, -106, 457, -288, 804, -107, 785, 521, -849, 521, 354, -734, -719, -832, -387, 1505, 340, 172, -311, 342, 236, -79, -457, 207, -722, -442, -1131, 584, -209, 302, -648, -137, 471, -14, 104], [152, -221, 502, 823, 56, -124, 895, 382, 206, 307, 1163, 129, -294, 883, 186, -197, -835, -53, 50, -310, -28, 250, -1544, -1260, 135, -118, 593, -25, 53, -426, -293, 836, -693, 1368, 358, -380, -83, 660, -232, -342, -1736, 938, -52, -519, 1086, -236, -1498, -275, 692, -379, -1096, 183, -524, -278, 848, 205, -226, -38, -991, 234, -539, 848, 305, -204, 395, -399, 285, -671, 653, 1075, 1108, 400, -472, 225, 89, 799, 85, 243, 555, 183], [137, -931, 869, -454, 421, -429, -717, 294, 1005, -474, 378, -661, -664, -31, -521, -845, 128, -31, 186, 158, 263, 48, -698, 875, 397, -573, -111, -834, 22, 644, -167, 98, 1053, -393, 1415, 606, 595, 262, 698, 1366, -1074, -385, 633, 826, -1043, 232, 362, 693, -418, -9, -196, -1687, 1584, -355, 330, 214, 736, -1078, -352, 692, -83, 703, -373, -1180, 1030, 228, -960, 1216, -527, -649, -558, 276, 277, -1083, -93, -368, 521, -92, 391, -80], [462, -1076, 100, -187, 383, -290, 113, -183, -409, 390, -791, -205, 275, -678, -1185, -692, 562, -1089, -39, -92, 923, 27, -64, -214, 778, -38, 587, -1090, 278, -154, -568, -985, -781, -355, 358, -135, 600, 187, -230, 883, 130, -321, 141, 794, -769, 509, 637, 231, -274, 118, -984, -704, -125, -227, 346, -646, 1027, 714, 791, 953, 1309, 303, -476, 587, 163, -624, 747, -19, 144, 344, 362, 1006, 323, -279, -941, -348, -22, 0, 52, 15], [-47, 323, -234, -402, 278, -29, -639, -550, -206, 198, 795, 133, -1660, 92, -433, -908, -445, 494, 492, -164, 38, -448, -687, -103, 42, -438, 74, 790, 760, -83, -671, 440, 421, -515, 1761, 1067, 791, 935, -203, 89, -774, 536, -478, 166, -437, -55, 63, 967, 182, 236, -370, 559, -251, -722, -132, 374, -140, -299, -1078, 656, 688, 1152, -590, 146, 327, 100, 357, -182, -2, 366, 619, 316, -68, 376, -682, -379, 23, 273, -171, -11], [-304, 140, -630, -157, -323, 1164, -605, -1038, -660, -140, -1189, -147, -247, -497, -242, -269, 273, 816, 247, 667, 252, -381, 152, 215, -270, -910, -505, 595, -453, -103, -341, 1331, 167, -1443, -202, -30, 5, 186, -628, 116, 1035, -504, -233, 199, 184, -259, 941, -739, -1258, -269, 874, -265, -480, 472, -1244, -312, 447, -227, 305, 83, -219, -518, 295, -409, -359, 1142, 987, -312, -697, -548, 98, -199, 499, 229, -153, -489, 675, -81, -247, 89], [-11, 715, -519, -350, 196, -248, -176, -75, 386, -137, -517, -190, -278, 495, 234, 35, 207, 246, 1039, 174, 861, -397, -714, -10, 274, 227, 275, 452, -86, -386, -95, 843, 448, -411, 184, 491, 16, 531, -490, 93, -681, -142, 437, -320, -456, -111, -310, 634, -10, -109, 276, -590, 454, -60, -342, 615, -71, -125, -32, 1097, -119, -227, -920, -125, 607, -798, 388, 468, 619, -110, 36, 355, 204, -244, -62, -349, 138, -4, 536, -123], [776, 525, 44, 577, -22, -6, 469, -453, -854, 443, 1140, 587, 648, -688, -177, 925, -574, -132, 59, -57, -173, -152, 396, -250, -97, 621, 347, 201, 534, 131, -377, -1601, -1129, 1157, -622, -1369, -425, 676, -402, -969, 398, 623, -102, -1037, 508, 49, 363, -921, 1022, 491, 213, 388, -631, 400, 905, -157, -211, 1315, 54, 236, -132, -632, -91, 1334, 17, -257, 932, -846, 249, 624, 832, -637, 116, -8, -552, -239, 469, 198, 220, 93], [-282, 159, -431, 295, -459, 388, 74, -276, 900, 186, 462, -1119, 556, 512, 1037, 802, -911, -104, -373, -457, 497, -977, 210, 8, -1197, -171, 519, 1045, 90, 21, 223, 363, -225, 908, 398, -1008, -347, 288, 44, -1197, 494, 67, 442, -270, 173, -78, 88, 104, 316, -389, -337, -390, 544, -31, 634, 448, 81, 440, -242, -154, -1373, 292, 155, 396, 570, -1107, -118, 969, 123, -219, -734, 1045, -602, -407, -661, -295, 286, -40, -39, 17], [-776, 794, 200, -1199, 1161, 889, -302, 169, -748, 179, -540, 149, -125, -239, 283, 32, 898, 855, 645, 1372, 337, 706, -268, -268, -51, 995, -523, 194, -627, -650, 536, 158, 228, -932, -467, 268, -331, 507, -1116, -385, 374, 1524, 919, 1225, 476, 834, -419, 268, -651, 691, -643, 635, -729, 770, -418, -40, -312, -460, 719, 747, 56, -13, -1254, 935, 603, -787, 656, -620, 1286, 180, 841, -86, 166, 573, -738, 275, -431, 297, -141, 178]]");
    s >> B;
    return B;
}

bool isUnimodular(const linalg::math_matrix<arithmetic::Integer> & A)
{
    linalg::math_matrix<arithmetic::Integer> B(A);
    hnf(B);
    for (unsigned i = 0; i < std::min(B.rows(), B.cols()); ++i)
        if (!isOne(B(i, i)))
            return false;
    return true;
}

int main()
{
    arithmetic::initArithmeticThreadAllocators();
//    RandomNumberGenerator::initializeSeeder();

    {
    linalg::math_matrix<arithmetic::Integer> A;
    linalg::math_colvector<arithmetic::Integer> v;
    std::istringstream s("[[534, -173, 98, -387, 481, 493, 325], [81, -32, 14, 510, -347, 238, -180], [-178, -117, -415, 212, 423, -623, -290], [138, -48, 131, -32, 118, 181, 392], [-767, 108, -331, 602, -375, 23, -152], [-420, 275, -34, 221, -40, 440, 853], [2, -63, 482, -671, -520, -178, -522], [14, 207, -310, 94, -168, 133, -312], [354, 661, -188, -159, 28, -568, -350], [18, 183, 350, 525, 49, -211, 50], [-298, 768, -399, 168, 180, -236, 5], [-236, 124, -480, 5, -363, 679, -295], [475, -563, 81, -104, 93, 556, -20], [165, -224, 83, -630, 298, 60, -454], [224, -576, -146, 323, 62, 259, 350], [-332, -55, 397, -101, 635, 60, -518], [218, 413, 324, 27, -835, 137, -381], [25, -135, 47, 316, 369, 345, 577], [545, -282, -56, 427, -581, 142, -246], [34, 121, 26, -269, 139, 17, 168], [69, 157, 645, -234, 159, -85, 157], [-172, -32, 28, -351, -494, 23, 156], [-264, 20, -442, -238, -326, -75, 300], [-292, 118, -186, -591, -170, -234, -756], [-174, 404, -55, -217, -196, -260, -130], [420, -86, 505, -35, 342, -88, 374], [-209, 376, -306, 575, -109, -465, -62], [391, 347, 283, 624, 96, -229, -290], [581, -108, 294, 155, 91, 781, 591], [41, 949, -165, -107, -350, 206, -230], [59, -579, 219, 242, 237, 276, 247], [278, 290, 332, 169, -57, -397, -292], [470, -84, -19, -184, -290, 533, 99], [-793, -256, 103, 445, 363, 222, 105], [-91, 167, -202, 372, 148, -24, -37], [-221, 184, -175, 75, 297, 168, -789], [-276, 676, -318, -12, -172, 555, 80], [-250, -17, -672, 142, 12, -127, -379], [96, -91, -87, 560, -567, -211, -358], [166, 102, 196, -285, 486, 224, 22]]");
    s >> A;
    std::istringstream ss("[868, -857, 211, 150, -977, -261, 151, -262, 187, -476, 12, -368, 197, 928, -261, 736, -862, 53, -1008, 408, 393, -143, -88, 421, 21, 377, -684, -528, -64, -243, -5, -226, -106, -82, -224, 222, -160, -130, -1127, 771]");
    ss >> v;
    std::pair<linalg::math_colvector<arithmetic::Integer>, arithmetic::Integer> res1;
    linalg::math_colvector<arithmetic::Integer> res2;
    res1 = solve(A, v);
    std::cout << "(" << res1.first << ", " << res1.second << ")\n";
    res2 = solveInt(A, v);
    std::cout << res2 << "\n";
    }
    return 0;
    
    
    TimedDataCollector dc_linalg("linalg hnf");
//    TimedDataCollector dc_det   ("det       ");
    TimedDataCollector dc_myhnf ("myhnf     ");
    TimedDataCollector dc_myhnf2("myhnf2    ");
//    linalg::math_matrix<arithmetic::Integer> A = makeMatrixSmall2();
//    linalg::math_matrix<arithmetic::Integer> A = makeMatrixSmall3();
    linalg::math_matrix<arithmetic::Integer> A = makeMatrixSmall4();
//    linalg::math_matrix<arithmetic::Integer> A = makeMatrixSmall();
//    linalg::math_matrix<arithmetic::Integer> A = makeMatrixBig();
//    linalg::math_matrix<arithmetic::Integer> A = makeMatrixLarge3();
    linalg::math_matrix<arithmetic::Integer> BB;
    {
        linalg::math_matrix<arithmetic::Integer> B = A;
        Profiler<TimedDataCollector> p(dc_linalg);
        linalg::hnf(B);
        std::cout << B << "\n";
        if (isHNF(B))
            std::cout << "OK\n";
        else
            std::cout << "ERROR: matrix not in HNF!\n";
        BB = B;
    }
    {
        linalg::math_matrix<arithmetic::Integer> B = A;
        Profiler<TimedDataCollector> p(dc_myhnf);
        myHNF(B);
        std::cout << B << "\n";
        if (isHNF(B))
            std::cout << "OK\n";
        else
            std::cout << "ERROR: matrix not in HNF!\n";
        if (B == BB)
            std::cout << "OK\n";
        else
            std::cout << "ERROR: not equal to output of linalg::hnf()!\n";
    }
//    {
//        linalg::math_matrix<arithmetic::Integer> B = makeMatrixLarge3();
//        Profiler<TimedDataCollector> p(dc_det);
//        std::cout << "determinant = " << det(B) << "\n";
//    }
}
