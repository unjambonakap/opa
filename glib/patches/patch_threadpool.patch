--- /home/benoit/programmation/repo/tensorflow/tensorflow/core/lib/core/threadpool.cc	2016-12-04 20:54:29.745119479 +0100
+++ ./glib/core/threadpool.cc	2016-12-04 23:10:10.362629940 +0100
@@ -13,93 +13,21 @@
 limitations under the License.
 ==============================================================================*/
 
-#include "tensorflow/core/lib/core/threadpool.h"
+#include "glib/core/threadpool.h"
 
 #define EIGEN_USE_THREADS
-#include "third_party/eigen3/unsupported/Eigen/CXX11/Tensor"
-#include "tensorflow/core/platform/context.h"
-#include "tensorflow/core/platform/denormal.h"
-#include "tensorflow/core/platform/logging.h"
-#include "tensorflow/core/platform/mutex.h"
-#include "tensorflow/core/platform/setround.h"
-#include "tensorflow/core/platform/tracing.h"
-#include "tensorflow/core/platform/types.h"
+#include "glib/platform/context.h"
+#include "glib/platform/denormal.h"
+#include "glib/platform/logging.h"
+#include "glib/platform/mutex.h"
+#include "glib/platform/setround.h"
+#include "glib/platform/tracing.h"
+#include "glib/platform/types.h"
 
 
-namespace tensorflow {
+namespace glib {
 namespace thread {
 
-struct EigenEnvironment {
-  typedef Thread EnvThread;
-  struct TaskImpl {
-    std::function<void()> f;
-    Context context;
-    uint64 trace_id;
-  };
-  struct Task {
-    std::unique_ptr<TaskImpl> f;
-  };
-
-  Env* const env_;
-  const ThreadOptions thread_options_;
-  const string name_;
-
-  EigenEnvironment(Env* env, const ThreadOptions& thread_options,
-                   const string& name)
-      : env_(env), thread_options_(thread_options), name_(name) {}
-
-  EnvThread* CreateThread(std::function<void()> f) {
-    return env_->StartThread(thread_options_, name_, [=]() {
-      // Set the processor flag to flush denormals to zero
-      port::ScopedFlushDenormal flush;
-      // Set the C++ rounding mode to ROUND TO NEAREST
-      port::ScopedSetRound round;
-      f();
-    });
-  }
-
-  Task CreateTask(std::function<void()> f) {
-    uint64 id = 0;
-    if (port::Tracing::IsActive()) {
-      id = port::Tracing::UniqueId();
-      port::Tracing::RecordEvent(port::Tracing::EventCategory::kScheduleClosure,
-                                 id);
-    }
-    return Task{
-        std::unique_ptr<TaskImpl>(new TaskImpl{
-            std::move(f), Context(ContextKind::kThread), id,
-        }),
-    };
-  }
-
-  void ExecuteTask(const Task& t) {
-    WithContext wc(t.f->context);
-    if (t.f->trace_id != 0) {
-      port::Tracing::ScopedActivity region(
-          port::Tracing::EventCategory::kRunClosure, t.f->trace_id);
-      t.f->f();
-    } else {
-      t.f->f();
-    }
-  }
-};
-
-struct ThreadPool::Impl : Eigen::ThreadPoolTempl<EigenEnvironment> {
-  Impl(Env* env, const ThreadOptions& thread_options, const string& name,
-       int num_threads)
-      : Eigen::ThreadPoolTempl<EigenEnvironment>(
-            num_threads, EigenEnvironment(env, thread_options, name)) {}
-
-  void ParallelFor(int64 total, int64 cost_per_unit,
-                   std::function<void(int64, int64)> fn) {
-    CHECK_GE(total, 0);
-    CHECK_EQ(total, (int64)(Eigen::Index)total);
-    Eigen::ThreadPoolDevice device(this, this->NumThreads());
-    device.parallelFor(
-        total, Eigen::TensorOpCost(0, 0, cost_per_unit),
-        [&fn](Eigen::Index first, Eigen::Index last) { fn(first, last); });
-  }
-};
 
 ThreadPool::ThreadPool(Env* env, const string& name, int num_threads)
     : ThreadPool(env, ThreadOptions(), name, num_threads) {}
@@ -128,4 +56,4 @@
 int ThreadPool::CurrentThreadId() const { return impl_->CurrentThreadId(); }
 
 }  // namespace thread
-}  // namespace tensorflow
+}  // namespace glib
